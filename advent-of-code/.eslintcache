[{"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/index.js":"1","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/App.js":"2","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/reportWebVitals.js":"3","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day4/index.jsx":"4","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day4/day4input.js":"5","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day5/index.jsx":"6","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day6/index.jsx":"7","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day8/index.jsx":"8","/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day9/index.jsx":"9"},{"size":500,"mtime":1607107087016,"results":"10","hashOfConfig":"11"},{"size":218,"mtime":1607496122369,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1607107087017,"results":"13","hashOfConfig":"11"},{"size":2092,"mtime":1607120617487,"results":"14","hashOfConfig":"11"},{"size":26330,"mtime":1607107087016,"results":"15","hashOfConfig":"11"},{"size":1640,"mtime":1607154964506,"results":"16","hashOfConfig":"11"},{"size":1594,"mtime":1607249024815,"results":"17","hashOfConfig":"11"},{"size":2156,"mtime":1607496064671,"results":"18","hashOfConfig":"11"},{"size":1930,"mtime":1607530904345,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"6ql58r",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/index.js",[],["42","43"],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/App.js",[],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/reportWebVitals.js",[],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day4/index.jsx",[],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day4/day4input.js",[],["44","45"],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day5/index.jsx",[],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day6/index.jsx",[],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day8/index.jsx",["46"],"import React, { useState } from 'react';\n\nfunction runCodes(codeLines){\n  let index = 0;\n  let accum = 0;\n  let answers = [];\n  do {\n    const currentCode = codeLines[index];\n    if (currentCode[0] === 'jmp'){\n      answers.push({storedIndex: index, accum, code: currentCode});\n      if (parseInt(currentCode[1]) === 0) return {answers, completed: false};\n      index += parseInt(currentCode[1]);\n    } else if (currentCode[0] === 'acc'){\n      if (answers.find(({storedIndex}) => storedIndex === index)) {\n        return {answers, completed: false};\n      }\n      accum += parseInt(currentCode[1]);\n      answers.push({storedIndex: index, accum, code: currentCode});\n      index++;\n    } else {\n      answers.push({storedIndex: index, accum, code: currentCode});\n      index ++;\n    }\n  }while (index < codeLines.length);\n  return {answers, completed: true};\n}\n\nexport function Day8() {\n  const [input, setInput] = useState('');\n\n  const inputTextArea =\n    <>\n      <h1>Infinite Loop</h1>\n      <textarea id=\"day4-input\"\n                value={input}\n                placeholder=\"Add your input file\"\n                onChange={({ target }) => setInput(target.value)} />\n    </>;\n\n  if (input === '') return inputTextArea;\n  let codeLines = input.split('\\n').map(code => code.split(' '));\n  //part 1\n  const firstCodeRun = runCodes(codeLines).answers;\n  const lastRun = firstCodeRun[firstCodeRun.length -1];\n\n  //part 2\n  const toggleCode = (code) => (code === 'jmp' ? 'nop' : 'jmp');\n  const answerCodes = firstCodeRun.filter(({code}) => code[0] !== 'acc');\n  const correctCode = answerCodes.map(({storedIndex, code}) =>\n    runCodes([\n      ...codeLines.slice(0, storedIndex),\n      [toggleCode(code[0]),code[1]],\n      ...codeLines.slice(storedIndex +1),\n    ])\n  ).filter(returned => returned.completed);\n\n\n  return (<div>\n    {inputTextArea}\n    <p>There are {codeLines.length} baggage rules</p>\n    <p>The loop happens at index <b>{lastRun?.storedIndex}</b> and the accum is at <b>{lastRun?.accum}</b> </p>\n    <p>The correct code get accumulated to <b>{correctCode[0].answers[correctCode[0].answers.length -1].accum}</b> </p>\n    <br/>\n\n  </div>)\n}",["47","48"],"/Users/lauraperry/Documents/adventOfCode2020/advent-of-code/src/days/Day9/index.jsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":14,"column":24,"nodeType":"57","messageId":"58","endLine":14,"endColumn":64},{"ruleId":"49","replacedBy":"59"},{"ruleId":"51","replacedBy":"60"},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index'.","ArrowFunctionExpression","unsafeRefs",["61"],["62"],"no-global-assign","no-unsafe-negation"]